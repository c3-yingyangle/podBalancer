/**
* Workstream.c3typ
*
* A workstream within the application.
*/
extendable entity type Workstream mixes FeatureEvaluatable {
  /** Refresh all issues by fetching from JIRA.
  *
  * Returns the number of fetched issues. */
  refreshIssues: member function(limit: int = 100): int js-server

  /** Create a workstream with the specified spec. */
  createWorkstream: function(spec: json): Workstream js-server

  // Get how many hours a given person is working each day in a given time frame
  // Takes into account the person's allocation percentage, PTO, holidays, and weekends
  getPersonAllocationHours: function(person: Person, workstream: Workstream, start: datetime, end: datetime): json js-server

  // Get how many hours all people is working each day in a given time frame
  // Takes into account everyone's allocation percentage, PTO, holidays, and weekends
  getWorkstreamAllocationHours: function(workstream: Workstream, start: datetime, end: datetime): json js-server

  /** Name of the workstream. */
  name: ~

  /** Start date of the workstream. */
  start: datetime

  /** End date of the workstream. */
  end: datetime

  /** String representation of range of this workstream. */
  humanDateRange: string calc concat(year(start), "-", month(start), "-", day(start), ' to ', year(end), "-", month(end), "-", day(end))

  /** JQL query to retrieve issues for this workstream. */
  query: string

  /** Conversion rate from story points to hour. */
  hoursPerStoryPoint: double

  /** Story points completed in this workstream. */
  hoursCompleted: double calc sum(issues.(statusCategory == "Done").storyPoints) * hoursPerStoryPoint

  /** Story points remaining in the workstream. */
  hoursRemaining: double calc sum(issues.(statusCategory != "Done").storyPoints) * hoursPerStoryPoint

  // Hard code
  hoursRemainingMinusAllocation: int calc calcWorkstreamHoursRemaining(id)
  // hoursRemainingMinusAllocation: int calc 8

  /** Issues under this workstream. */
  issues: [Issue] (workstream)

  // /** Assignments relating to this workstream. */
  // assignments: [PersonToWorkstreamAssignment] (workstream)
}
